import uuid
import random
import string

# import logging

from django.conf import settings
from django.db import models
from django.utils.translation import ugettext as _
from django.urls import reverse
from django.contrib.sites.models import Site


#############
# CURRENCIES
#############

CURRENCIES = {  'usd': {
                    'name': _('US Dollar'), 
                    'symbol':"$"},
                # 'euro': {
                #     'name': _('Euros'), 
                #     'symbol':"E"},
                # }
            }

##########
# CHOICES
##########

clist = list(CURRENCIES.keys())
clist.sort()
CURRENCY_CHOICES = tuple([(item, CURRENCIES[item]['name']) for item in clist])        #(('usd', _('US Dollar')),)


############
# UTILITIES
############

def random_string(length=8, check=[]):
    letters= string.digits + string.ascii_uppercase
    value = ''.join(random.sample(letters,length))

    if value not in check:
        return value
    return random_string(length=length, check=check)

##################
# ABSTRACT MODELS
##################

class CreateUpdateModelBase(models.Model):
    created = models.DateTimeField("date created", auto_now_add=True)
    updated = models.DateTimeField("last updated", auto_now=True)

    class Meta:
        abstract = True


class ProductModelBase(CreateUpdateModelBase):
    sku = models.CharField(_("SKU"), max_length=8, blank=False)    # Needs to be autogenerated
    catalog = models.ManyToManyField('vendor.Catalog')
    msrp = models.DecimalField(max_digits=10, decimal_places=2)
    currency = models.CharField(_("Currency"), max_length=4, choices=CURRENCY_CHOICES)
    available = models.BooleanField(_("Available"), default=False, help_text="Is this currently available?")

    class Meta:
        abstract = True

    # def generate_sku(self):
    #     self.sku = random_string()

    def current_price(self):
        '''
        Check if there are any price options active, otherwise use msrp.
        '''
        return self.msrp

    def price_display(self):
        return "$%s" % self.current_price()


#########
# MIXINS
#########


##########
# CATALOG
##########

class Catalog(CreateUpdateModelBase):
    '''
    List of itmes being offered.
    '''
    name = models.CharField(_("Name"), max_length=100, blank=False)
    slug = models.SlugField(_("Slug"))
    site = models.ManyToManyField(Site, related_name='sites', help_text="Which site(s) is this inventory available to?")


class SalePrice(models.Model):
    '''
    This is to allow an item to have multiple available prices with date ranges (for sales).
    SalePrices with a higher priority will override prices in the same date range with a lower priority.
    '''
    item = models.ForeignKey(settings.PRODUCT_MODEL, verbose_name=_("Item"), on_delete=models.CASCADE, related_name="sale_price")
    price = models.DecimalField(max_digits=10, decimal_places=2)
    currency = models.CharField(_("Currency"), max_length=4, choices=CURRENCY_CHOICES)
    start_date = models.DateTimeField(_("Start Date"), auto_now_add=True)
    end_date = models.DateTimeField(_("End Date"))
    priority = models.PositiveIntegerField(_("Priority"), help_text="Higher number overrides prices with lower numbners in the same date range.")

    @property
    def price_display(self):
        return "$%s" % self.price


class Cart(models.Model):
    '''
    List of all the offerings the user is looking to purchase
    '''
    user = models.ForeignKey(settings.AUTH_USER_MODEL, null=True, on_delete=models.SET_NULL)
    items = models.ManyToManyField(settings.PRODUCT_MODEL, verbose_name=_("Items"))
    saved_for_later = models.BooleanField()


# class Coupon(models.Model):
#     pass


# class Wishlist(models.Model):
#     name = models.CharField(_("Name"), max_length=100, blank=False)
#     user = models.ForeignKey(settings.AUTH_USER_MODEL, null=True, on_delete=models.SET_NULL)
#     items = models.ManyToManyField(settings.PRODUCT_MODEL, verbose_name=_("Items"))


class Order(CreateUpdateModelBase):
    '''
    A link of all the items purchased in a transaction.
    '''
    user = models.ForeignKey(settings.AUTH_USER_MODEL, null=True, on_delete=models.SET_NULL)
    status = models.IntegerField(_("Status"))


class Item(CreateUpdateModelBase):
    '''
    A link for each item to a user after it's been purchased
    '''
    order = models.ForeignKey(Order, on_delete=models.CASCADE)
    product = models.ForeignKey(settings.PRODUCT_MODEL, on_delete=models.CASCADE)
    price_paid = models.DecimalField(max_digits=10, decimal_places=2)
    currency = models.CharField(_("Currency"), max_length=4, choices=CURRENCY_CHOICES)
    fullfilled = models.BooleanField()
    user = models.ForeignKey(settings.AUTH_USER_MODEL, null=True, on_delete=models.SET_NULL)
